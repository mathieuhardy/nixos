#!/usr/bin/env sh

# ==============================================================================
#
# Script name: poly-bluetooth
# Description: Display bluetooth information in polybar format.
# Dependencies: bluetoothctl, easier_cli.sh, rice, systemctl
# GitHub: https://www.github.com/mathieuhardy/nixos
# License: https://www.github.com/mathieuhardy/nixos/LICENSE
# Contributors: Mathieu Hardy
#
# TODO: notify-send changes
#
# ==============================================================================

# ------------------------------------------------------------------------------
# Dependencies
# ------------------------------------------------------------------------------

. easier_cli.sh

requires bluetoothctl
requires rice
requires systemctl

# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------

wait_timeout=$(rice -m polybar "config.bluetooth.refresh_rate_s")
if [ -z "${wait_timeout}" ]
then
    echo "No timeout provided" 1>&2
    exit 1
fi

icon_enabled=$(rice -u -m polybar "icons.bluetooth.enabled")

fg=$(rice -m polybar "colors.bluetooth.enabled.fg")
bg=$(rice -m polybar "colors.bluetooth.enabled.bg")

easier_cli_program='poly-bluetooth'
easier_cli_version='1.0.0'

easer_cli_describe=( \
    'o | 1 | - | h | help | Show this help and exit' )

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

toggle_bluetooth()
{
    status=$(systemctl is-active "bluetooth")

    if [ "${status}" = "active" ]
    then
        systemctl stop bluetooth
    else
        systemctl start bluetooth
        if bluetoothctl show | grep -q "Powered: no"
        then
            bluetoothctl power on
        fi
    fi
}

dump()
{
    status=$(systemctl is-active "bluetooth.service")

    if [ "${status}" != "active" ]
    then
        dump_default
        return
    fi

    if bluetoothctl show | grep -q "Powered: no"
    then
        dump_default
        return
    fi

    count=0

    paired_devices=$(bluetoothctl paired-devices \
        | grep "Device" \
        | cut -d ' ' -f 2)

    for device in $(echo ${paired_devices})
    do
        info=$(bluetoothctl info "${device}")

        if echo "${info}" | grep -q "Connected: yes"
        then
            alias=$(echo "${info}" | grep "Alias" | cut -d ' ' -f 2-)
            sep=

            if [ ${count} -gt 0 ]
            then
                sep=" "
            fi

            printf \
                "%%{F%s}%%{B%s}%s%%{T2}%s%%{T-} %%{T1}%s%%{T-} %%{B- F-}" \
                "${fg}" \
                "${bg}" \
                "${sep}" \
                "${icon_enabled}" \
                "${alias}"

            count=$(( count + 1 ))
        fi
    done

    if [ ${count} -eq 0 ]
    then
        dump_default
        return
    fi

    printf '\n'
}

dump_default()
{
    icon_disabled=$(rice -u -m polybar "icons.bluetooth.disabled")

    fg_disabled=$(rice -m polybar "colors.bluetooth.disabled.fg")
    bg_disabled=$(rice -m polybar "colors.bluetooth.disabled.bg")

    printf \
        "%%{F%s}%%{B%s} %%{T2}%s%%{T-} %%{B- F-}\n" \
        "${fg_disabled}" \
        "${bg_disabled}" \
        "${icon_disabled}"
}

loop()
{
    while [ /bin/true ]
    do
        dump

        sleep ${wait_timeout} &
        wait
    done
}

# ------------------------------------------------------------------------------
# Command line arguments
# ------------------------------------------------------------------------------

cli_parse "${cli_desc[@]}" "${@}"

if [ "${opt_h}" = "1" ]
then
    cli_usage
fi

# ------------------------------------------------------------------------------
# Entry point
# ------------------------------------------------------------------------------

trap "toggle_bluetooth" USR1

loop
