#!/usr/bin/env sh

# ==============================================================================
#
# Script name: poly-volume
# Description: Display volume information in polybar format.
# Dependencies: pacmd, pactl, polybar
# GitHub: https://www.github.com/mathieuhardy/nixos
# License: https://www.github.com/mathieuhardy/nixos/LICENSE
# Contributors: Mathieu Hardy
#
# ==============================================================================

# ------------------------------------------------------------------------------
# Dependencies
# ------------------------------------------------------------------------------

command -v pacmd >/dev/null || exit 1
command -v pactl >/dev/null || exit 1
command -v polybar >/dev/null || exit 1

if ! command -v rice >/dev/null
then
    echo "Missing 'rice'" 1>&2
    exit 1
fi

# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------

volume_max=100
increment=5
limit=$(( volume_max - increment ))

icon_unmuted=$(rice -u -m polybar "icons.volume.unmuted")
icon_muted=$(rice -u -m polybar "icons.volume.muted")
icon_error=$(rice -u -m polybar "icons.error")

fg=$(rice -m polybar "colors.volume.fg")
bg=$(rice -m polybar "colors.volume.bg")

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

get_sink()
{
    sink=$(pacmd list-sinks | awk '/\* index:/{print $3}')
}

get_volume()
{
    pacmd list-sinks \
        | grep -A 15 'index: '"${1}"'' \
        | grep 'volume:' \
        | grep -E -v 'base volume:' \
        | awk -F : '{print $3; exit}' \
        | grep -o -P '.{0,3}%' \
        | sed 's/.$//' \
        | tr -d ' '
}

get_mute()
{
    pacmd list-sinks \
        | grep -A 15 "index: ${1}" \
        | awk '/muted/ {print $2; exit}'
}

listen()
{
    local first_run=0

    LANG=en_US pactl subscribe 2>/dev/null | {
        while true
        do
            {
                if [ ${first_run} -eq 0 ]
                then
                    first_run=1
                else
                    read -r event || break

                    if ! echo "$event" | grep -q -e "on card" -e "on sink" -e "on server"
                    then
                        continue
                    fi
                fi
            } &>/dev/null

            dump
        done
    }
}

volume_control()
{
    if ! get_sink
    then
        dump_default
        return 1
    fi

    if [ "${1}" = "toggle" ]
    then
        is_muted=$(get_mute "${sink}")
        if [ -z "${is_muted}" ]
        then
            dump_default
            return 1
        fi

        if [ "${is_muted}" = "yes" ]
        then
            pactl set-sink-mute "${sink}" "no"
        else
            pactl set-sink-mute "${sink}" "yes"
        fi
    elif [ "${1}" = "mute" ]
    then
        pactl set-sink-mute "${sink}" "yes"
    elif [ "${1}" = "unmute" ]
    then
        pactl set-sink-mute "${sink}" "no"
    fi
}

volume_up()
{
    if ! get_sink
    then
        dump_default
        return 1
    fi

    volume=$(get_volume "${sink}")
    [ -n "${volume}" ] || return 1

    if [ "${volume}" -le ${volume_max} ] && [ "${volume}" -ge "${limit}" ]
    then
        pactl set-sink-volume "${sink}" "${volume_max}%"
    elif [ "${volume}" -lt "${limit}" ]
    then
        pactl set-sink-volume "${sink}" "+${increment}%"
    fi
}

volume_down()
{
    if ! get_sink
    then
        dump_default
        return 1
    fi

    pactl set-sink-volume "${sink}" "-${increment}%"
}

dump()
{
    if ! get_sink
    then
        dump_default
        return 1
    fi

    volume=$(get_volume "${sink}")
    if [ -z "${volume}" ]
    then
        dump_default
        return 1
    fi

    is_muted=$(get_mute "${sink}")
    if [ -z "${is_muted}" ]
    then
        dump_default
        return 1
    fi

    if [ "$is_muted" = "yes" ]
    then
        icon="${icon_muted}"
    else
        icon="${icon_unmuted}"
    fi

    printf \
        "%%{F%s}%%{B%s} %%{T2}%s%%{T-} %%{T1}%s%%%%{T-} %%{B- F-}\n" \
        "${fg}" \
        "${bg}" \
        "${icon}" \
        "${volume}"
}

dump_default()
{
    printf \
        "%%{F%s}%%{B%s} %%{T2}%s%%{T-} %%{T1}%s%%%%{T-} %%{B- F-}\n" \
        "${fg}" \
        "${bg}" \
        "${icon_error}" \
        "--"
}

error()
{
    echo "${1}" 1>&2
    exit 1
}

# ------------------------------------------------------------------------------

while [ ${#} -gt 0 ]
do
    case ${1} in
        start)
            shift
            ;;

        toggle-mute)
            volume_control toggle
            exit 0
            ;;

        volume-up)
            volume_up
            exit 0
            ;;

        volume-down)
            volume_down
            exit 0
            ;;

        mute)
            volume_control mute
            exit 0
            ;;

        unmute)
            volume_control unmute
            exit 0
            ;;

        *)
            error "UNKNOWN_ARGUMENT"
            ;;
    esac
done

# Start loop
listen
