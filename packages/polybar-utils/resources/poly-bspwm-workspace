#!/usr/bin/env bash

# ==============================================================================
#
# Script name: poly-bspwm-workspace
# Description: Display workspace list of bspwm in polybar format.
# Dependencies: bspc, easier_cli.sh, rice
# GitHub: https://www.github.com/mathieuhardy/nixos
# License: https://www.github.com/mathieuhardy/nixos/LICENSE
# Contributors: Mathieu Hardy
#
# See https://manpages.debian.org/testing/bspwm/bspc.1.en.html
#
# ==============================================================================

# ------------------------------------------------------------------------------
# Dependencies
# ------------------------------------------------------------------------------

. easier_cli.sh

requires bspc
requires rice

# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------

reset="%{B- F-}"

fg_default=$(rice -m polybar "colors.workspaces.fg.default")
bg_default=$(rice -m polybar "colors.workspaces.bg.default")

fg_current=$(rice -m polybar "colors.workspaces.fg.current")
bg_current=$(rice -m polybar "colors.workspaces.bg.current")

c_normal="%{B${bg_default}}%{F${fg_default}}"
c_current="%{B${bg_current}}%{F${fg_current}}"

icons=()
icons_empty=()

current_desktop=$(bspc query --desktops -d .focused)
windows_count=()

easier_cli_program='poly-bspwm-workspace'
easier_cli_version='1.0.0'

easer_cli_describe=( \
    'o | 1 | - | h | help | Show this help and exit' )

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

num()
{
    bspwm_index=${1}
    is_current=${2}
    count=${3}

    icon_index=$(( bspwm_index - 1 ))

    action_left_click="bspc desktop -f \"^${bspwm_index}\""
    action_scroll_up="bspc desktop -f next"
    action_scroll_down="bspc desktop -f prev"

    actions_scroll="%{A4:${action_scroll_up}:}%{A5:${action_scroll_down}:}"

    if [ ${count} -eq 0 ]
    then
        icon=${icons_empty[${icon_index}]}
    else
        icon=${icons[${icon_index}]}
    fi

    if [ ${is_current} -eq 1 ]
    then
        echo "${c_current}${actions_scroll} ${icon} %{A}%{A}${reset}"
    else
        actions="%{A1:${action_left_click}:}${actions_scroll}"

        echo "${c_normal}${actions} ${icon} %{A}%{A}%{A}${reset}"
    fi
}

dump()
{
    output=""
    icon_index=0
    bspwm_index=1
    active=0

    for desktop in $(bspc query --desktops)
    do
        # Check if active
        if [ "${desktop}" = "${current_desktop}" ]
        then
            active=1
        else
            active=0
        fi

        number=$(num ${bspwm_index} ${active} ${windows_count[${icon_index}]})

        # Add desktop
        if [ ${bspwm_index} -eq 10 ]
        then
            output="${number}${output}"
            break
        else
            output="${output}${number}"
        fi

        # Next dekstop
        bspwm_index=$(( bspwm_index + 1 ))
        icon_index=$(( icon_index + 1 ))
    done

    echo ${output}
}

get_icons_list()
{
    count=$(bspc query --desktops | wc -l)
    count=$(( count + 1 ))
    index=1

    while [ ${index} -lt ${count} ]
    do
        icons+=($(rice -u -m polybar "icons.workspaces.\"${index}\""))
        icons_empty+=($(rice -u -m polybar "icons.workspaces.empty.\"${index}\""))

        index=$(( index + 1 ))
    done
}

get_windows_count()
{
    windows_count=()

    for desktop in $(bspc query --desktops)
    do
        count=$(get_windows_count_for_desktop ${desktop})

        windows_count+=(${count})
    done
}

get_windows_count_for_desktop()
{
    desktop=${1}

    bspc query --nodes --node .window.!hidden --desktop ${desktop} | wc -l
}

update_windows_count_for_desktop()
{
    desktop=${1}

    # Find index of the desktop
    index=0

    for d in $(bspc query --desktops)
    do
        [ "${d}" = "${desktop}" ] && break

        index=$(( index + 1 ))
    done

    # Update count
    count=$(get_windows_count_for_desktop ${desktop})

    windows_count[${index}]=${count}
}

watch()
{
    # Catches desktop changes
    #   > desktop_focus <monitor_id> <desktop_id>
    #   > node_add <monitor_id> <desktop_id> <ip_id> <node_id>
    #   > node_remove <monitor_id> <desktop_id> <node_id>
    #   > node_flag <monitor_id> <desktop_id> <node_id> hidden|sticky|private|locked|marked|urgent on|off
    #   > node_swap <src_monitor_id> \
    #               <src_desktop_id> \
    #               <src_node_id> \
    #               <dst_monitor_id> \
    #               <dst_desktop_id> \
    #               <dst_node_id>
    #   > node_transfer <src_monitor_id> \
    #                   <src_desktop_id> \
    #                   <src_node_id> \
    #                   <dst_monitor_id> \
    #                   <dst_desktop_id> \
    #                   <dst_node_id>
    bspc subscribe \
        desktop_focus \
        node_add \
        node_remove \
        node_flag \
        node_swap \
        node_transfer | while read -a msg
    do
        event=${msg[0]}

        if [ "${event}" = "desktop_focus" ]
        then
            current_desktop=${msg[2]}
        elif [ "${event}" = "node_add" ] || [ "${event}" = "node_remove" ]
        then
            update_windows_count_for_desktop ${msg[2]}
        elif [ "${event}" = "node_flag" ]
        then
            update_windows_count_for_desktop ${msg[2]}
        elif [ "${event}" = "node_swap" ] || [ "${event}" = "node_transfer" ]
        then
            update_windows_count_for_desktop ${msg[2]}
            update_windows_count_for_desktop ${msg[5]}
        fi

        dump
    done
}

# ------------------------------------------------------------------------------
# Command line arguments
# ------------------------------------------------------------------------------

cli_parse "${cli_desc[@]}" "${@}"

if [ "${opt_h}" = "1" ]
then
    cli_usage
fi

# ------------------------------------------------------------------------------
# Entry point
# ------------------------------------------------------------------------------

# Show workspaces
get_icons_list
get_windows_count

dump

# Watch Bspwm events
watch
