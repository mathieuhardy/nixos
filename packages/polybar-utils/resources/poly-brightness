#!/usr/bin/env sh

# ==============================================================================
#
# Script name: poly-brightness
# Description: Display brightness information in polybar format.
# Dependencies: brightnessctl, easier_cli.sh, rice
# GitHub: https://www.github.com/mathieuhardy/nixos
# License: https://www.github.com/mathieuhardy/nixos/LICENSE
# Contributors: Mathieu Hardy
#
# ==============================================================================

# ------------------------------------------------------------------------------
# Dependencies
# ------------------------------------------------------------------------------

. easier_cli.sh

requires brightnessctl
requires rice

# ------------------------------------------------------------------------------
# Variables
# ------------------------------------------------------------------------------

icon=$(rice -u -m polybar "icons.brightness")

fg=$(rice -m polybar "colors.brightness.fg")
bg=$(rice -m polybar "colors.brightness.bg")

easier_cli_program='poly-brightness'
easier_cli_version='1.0.0'

easer_cli_describe=( \
    'o | 1 | - | h | help | Show this help and exit' )

# ------------------------------------------------------------------------------
# Functions
# ------------------------------------------------------------------------------

dump()
{
    output_short=
    output_long=
    path=/tmp/cerebro/brightness
    count=0

    for device in $(ls ${path})
    do
        # Check filesystem
        path=${path}/${device}
        [ -d ${path} ] || continue

        path_value=${path}/value
        [ -e ${path_value} ] || continue

        path_max_value=${path}/max_value
        [ -e ${path_max_value} ] || continue

        # Read values from filesystem
        value=$(cat ${path_value})
        max_value=$(cat ${path_max_value})

        [ "${max_value}" != "0" ] || continue

        # Compute values
        percent=$(( ${value} * 100 / ${max_value} ))

        step=$(( max_value * 5 / 100 ))

        value_up=$(( value + step ))
        value_down=$(( value - step ))

        if [ ${value_up} -gt ${max_value} ]
        then
            value_up=${max_value}
        fi

        if [ ${value_down} -lt 0 ]
        then
            value_down=0
        fi

        # Actions scroll up/down
        actions="%{A4:brightnessctl -d ${device} s ${value_up}:}"
        actions="${actions}%{A5:brightnessctl -d ${device} s ${value_down}:}"

        output_short="${output_short} ${actions}${percent}%%{A}%{A}"
        output_long="${output_long} ${device} ${percent}%%{A}%{A}"

        count=$(( count + 1 ))
    done

    if [ ${count} -eq 1 ]
    then
        output=${output_short}
    fi

    if [ -z "${output}" ]
    then
        dump_default
        return
    fi

    printf \
        "%%{F%s}%%{B%s} %%{T2}%s%%{T-}%%{T1}%s%%{T-} %%{B- F-}\n" \
        "${fg}" \
        "${bg}" \
        "${icon}" \
        "${output}"
}

dump_default()
{
    printf \
        "%%{F%s}%%{B%s} %%{T2}%s%%{T-} %%{T1}--%%{T-} %%{B- F-}\n" \
        "${fg}" \
        "${bg}" \
        "${icon}"
}

# ------------------------------------------------------------------------------
# Command line arguments
# ------------------------------------------------------------------------------

cli_parse "${cli_desc[@]}" "${@}"

if [ "${opt_h}" = "1" ]
then
    cli_usage
fi

# ------------------------------------------------------------------------------
# Entry point
# ------------------------------------------------------------------------------

dump
